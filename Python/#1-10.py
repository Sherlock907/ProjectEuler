from time import perf_counter as _p
import itertools
from reuseableFunctions import checkforpalindrome as palichecker, myNumpyPrimeSieve
import math

def euler1():
    # If we list all the natural numbers below 10 that are multiples of 3 or 5,
    # we get 3, 5, 6 and 9. The sum of these multiples is 23.
    # Find the sum of all the multiples of 3 or 5 below 1000.
    print(sum(set([i for i in range(3,1001,3)] + [i for i in range(5,1001,5)])))



def euler2():
    # Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    # By starting with 1 and 2, the first 10 terms will be:
    # 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    # By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    # find the sum of the even-valued terms.

    def fibo():
        a,b, = 1,1
        for i in itertools.count(1):
            a, b = b, a+b
            yield b

    res = 0
    for x in fibo():
        if x > 4_000_000:
            break
        if x % 2 == 0:
            res += x

    print(res)


def euler3():
    # check ob nmax mathematisch logisch oder ob ein log() algo benutzt werden sollte
    # The prime factors of 13195 are 5, 7, 13 and 29.
    # What is the largest prime factor of the number 600851475143 ?
    n = 600851475143
    primes = myNumpyPrimeSieve(int(n**0.5))
    for x in reversed(primes):
        if n % x == 0:
            print(x)
            break

def euler4():
    # A palindromic number reads the same both ways. The largest palindrome made from the product
    # of two 2-digit numbers is 9009 = 91 × 99.
    # Find the largest palindrome made from the product of two 3-digit numbers.
    res = 0
    for x in range(100, 1000):
        for y in range(100, 1000):
            if x*y > res and palichecker(x*y):
                res = x*y
    print(res)

def euler5():
    # 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
    # What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    res = 1
    for i in range(1,11):
        res *= i // math.gcd(i,res)
    print(res)

def euler6():
    # Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    print(abs(sum([i**2 for i in range(1,101)])-sum([x for x in range(1,101)])**2))

def euler7():
    # By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
    # What is the 10 001st prime number?"""
    print(myNumpyPrimeSieve(500_000)[10_001])

def euler8():
    # The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
    # Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

    thestr = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
    res = 0
    for i in range(-13,1000):
        if res < (r:=math.prod([int(x) for x in thestr[i:i+13]])):
            res = r
    print(res)

def euler9():
    # A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
    # a**2 + b**2 = c**2
    # For example, 3**2 + 4**2 = 9 + 16 = 25 = 5**2.
    # There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    # Find the product abc.

    for a in range(1,500):
        for b in range(a,500):
            if a+b+(a**2+b**2)**0.5 == 1000:
                print(a*b*(a**2+b**2)**0.5)
                return

    # print([int(a*b*(a**2+b**2)**0.5) for a in range(1,500) for b in range(a,500) if a+b+(a**2 + b**2)**0.5 == 1000])

def euler10():
    # The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
    # Find the sum of all the primes below two million.
    print(sum(myNumpyPrimeSieve(2_000_000)))



if __name__ == "__main__":
    _s = _p()
    euler1()
    euler2()
    euler3()
    euler4()
    euler5()
    euler6()
    euler7()
    euler8()
    euler9()
    euler10()
    print("{:.5f}".format((_p()-_s)*1000), " ms")