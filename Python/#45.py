"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""
import time
from itertools import count
import numpy as np
start = time.time()

def triangleNumbers(n):
    return n*(n+1)/2
def pentagonalNumbers(n):
    return n*(3*n-1)//2
def hexagonalNumbers(n):
    return n * (2*n-1)


def pentagonalNumbersG(start):
    for n in count(start):
        yield n*(3*n-1)//2
def hexagonalNumbersG(start):
    for n in count(start):
        yield n * (2*n-1)


def NumpyTry():
    # T285 = P165 = H143 = 40755.

    nMax = 100_000
    tri = np.zeros(nMax)
    pen = np.zeros(nMax)
    hexi = np.zeros(nMax)

    for i in range(144, nMax):
        np.put(tri, i, triangleNumbers(i))
        np.put(pen, i, pentagonalNumbers(i))
        np.put(hexi, i, hexagonalNumbers(i))

    for x in pen[pen > 40755]:
        if x in hexi:
            return int(x)


def whileTry():
    #T285 = P165 = H143 = 40755.

    p = 166
    h = 144
    while (a:=hexagonalNumbers(h)) != (b:=pentagonalNumbers(p)):
        if a > b:
            p += 1
        else:
            h += 1
    return a

def Generator():
    #T285 = P165 = H143 = 40755.
    # every hexa is a tri

    pg = pentagonalNumbersG(166)
    hg = hexagonalNumbersG(144)
    p, h = next(pg), next(hg)

    while p != h:
        if p < h:
            p = next(pg)
        else:
            h = next(hg)
    return p

start = time.time()
print(whileTry(),"while")
print((time.time()-start)*1000," ms\n")

start = time.time()
print(Generator(), "Generator")
print((time.time()-start)*1000," ms\n")

start = time.time()
print(NumpyTry(), "Numpy")
print(time.time()-start, " s")